<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="${dataSourceId}" />
		<property name="xaDataSourceClassName" value="${xaDriverClass}" />
		<property name="xaProperties">
			<props>
				<prop key="URL">${jdbcUrl}</prop>
				<prop key="user">${user}</prop>
				<prop key="password">${password}</prop>
			</props>
		</property>
		<property name="maxPoolSize" value="${maxPoolSize}" />
		<property name="minPoolSize" value="${minPoolSize}" />
	</bean>

	<bean id="sessionFactory" class="com.cnpc.pms.base.entity.PMSAnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="lobHandler">
			<ref bean="lobHandler" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- Create/update the database tables automatically when the JVM starts up -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.max_fetch_depth">5</prop>

				<prop key="hibernate.connection.isolation">3</prop>
				<prop key="current_session_context_class">jta</prop>
				<prop key="transaction.manager_lookup_class">
					com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup
				</prop>
				<prop key="transaction.factory_class">
					org.hibernate.transaction.JTATransactionFactory
				</prop>
				<prop key="connection.release_mode">auto</prop>

				<!-- <prop key="cache.provider_class"> org.hibernate.cache.NoCacheProvider </prop> <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop> 
					<prop key="hibernate.cache.use_second_level_cache">true</prop> <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop> 
					<prop key="hibernate.cache.use_query_cache">true</prop> -->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.cnpc.pms.**.entity.</value>
			</list>
		</property>
		<property name="entityCacheStrategies">
			<props></props>
		</property>
		<property name="collectionCacheStrategies">
			<props></props>
		</property>
	</bean>

	<!-- Construct Atomikos UserTransactionManager, needed to configure Spring -->
	<bean id="jtaTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init"
		destroy-method="close">
		<!-- when close is called, should we force transactions to terminate or not? -->
		<property name="forceShutdown">
			<value>true</value>
		</property>
	</bean>

	<!-- Also use Atomikos UserTransactionImp, needed to configure Spring -->
	<bean id="jtaUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout">
			<value>300</value>
		</property>
	</bean>

	<!-- Configure the Spring framework to use JTA transactions from Atomikos -->
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager">
			<ref bean="jtaTransactionManager" />
		</property>
		<property name="userTransaction">
			<ref bean="jtaUserTransaction" />
		</property>
		<property name="allowCustomIsolationLevels" value="true"/>
	</bean>
</beans>